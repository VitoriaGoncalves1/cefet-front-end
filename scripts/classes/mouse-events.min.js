(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
let mouseEventsEl = document.querySelector('#mouse-events');

mouseEventsEl.querySelectorAll('li').forEach(triggeredEl => {
  // recupera o elemento onde vamos escrever que o evento foi disparado
  // (i.e., o <strong></strong>)
  let outputEl = triggeredEl.querySelector('strong');

  // remove o que quer que estivesse dentro dos <strong></strong>
  outputEl.innerHTML = '';
  outputEl.tiraImagemTimerId = [];
  outputEl.classList.add('triggered-event')

  // determina de qual evento este li se trata (olha para o <code></code>)
  let evento = triggeredEl.querySelector('code').innerHTML;

  // coloca o evento no li
  triggeredEl.addEventListener(evento, e => {

    // interrompe um possÃ­vel timeout que poderia jÃ¡ estar correndo para o
    // anÃºncio deste evento
    outputEl.tiraImagemTimerId.forEach(clearTimeout);

    // coloca uma imagem nesse elemento
    outputEl.innerHTML = 'ðŸ“¢';
    outputEl.classList.add('active');


    // registra uma callback para retirar a imagem
    outputEl.tiraImagemTimerId.push(setTimeout(() => {
      outputEl.classList.remove('active');
    }, 0));
    outputEl.tiraImagemTimerId.push(setTimeout(() => {
      outputEl.innerHTML = '';
    }, 2000));

  });
})

},{}]},{},[1])

//# sourceMappingURL=mouse-events.min.js.map
